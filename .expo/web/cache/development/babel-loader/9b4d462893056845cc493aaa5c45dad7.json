{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Projects\\\\Book Donation App\\\\book-santa-stage-13\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeListView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport SwipeRow from \"./SwipeRow\";\n\nvar SwipeListView = function (_PureComponent) {\n  _inherits(SwipeListView, _PureComponent);\n\n  var _super = _createSuper(SwipeListView);\n\n  function SwipeListView(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeListView);\n\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n\n    if (Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n\n    _this._onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n\n    if (typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n\n      _this._onScroll = _this.props.onScroll;\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n      this.props.listViewRef && this.props.listViewRef(ref);\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this2 = this;\n\n      if (!HiddenComponent) {\n        return React.cloneElement(VisibleComponent, _objectSpread(_objectSpread({}, VisibleComponent.props), {}, {\n          ref: function ref(row) {\n            return _this2._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this2.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this2.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this2.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this2.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded() {\n            return _this2.rowSwipeGestureEnded(key);\n          }\n        }));\n      } else {\n        return React.createElement(SwipeRow, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this2.props.onSwipeValueChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this2._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this2.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded() {\n            return _this2.rowSwipeGestureEnded(key);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this2.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(key, _this2._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this2.props.onRowClose && _this2.props.onRowClose(key, _this2._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this2.props.onRowDidClose && _this2.props.onRowDidClose(key, _this2._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this2.onRowPress(key);\n          },\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this2.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this2.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }\n        }, HiddenComponent, VisibleComponent);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = \"\" + secId + rowId;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n          index = rowData.index;\n      var key = item.key;\n\n      if (!key && this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          useSectionList = _this$props.useSectionList,\n          renderListView = _this$props.renderListView,\n          props = _objectWithoutProperties(_this$props, [\"useSectionList\", \"renderListView\"]);\n\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? Animated.SectionList : SectionList;\n\n        return React.createElement(_ListComponent, _extends({}, props, this.listViewProps, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      var ListComponent = this.props.useAnimatedList ? Animated.FlatList : FlatList;\n      return React.createElement(ListComponent, _extends({}, props, this.listViewProps, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return SwipeListView;\n}(PureComponent);\n\nSwipeListView.propTypes = {\n  renderListView: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderHiddenItem: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  closeOnScroll: PropTypes.bool,\n  closeOnRowPress: PropTypes.bool,\n  closeOnRowBeginSwipe: PropTypes.bool,\n  closeOnRowOpen: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onScrollEnabled: PropTypes.func,\n  onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  swipeRowStyle: ViewPropTypes.style,\n  listViewRef: PropTypes.func,\n  previewRowKey: PropTypes.string,\n  previewFirstRow: PropTypes.bool,\n  previewRowIndex: PropTypes.number,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  useAnimatedList: PropTypes.bool\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nexport default SwipeListView;","map":{"version":3,"sources":["F:/Projects/Book Donation App/book-santa-stage-13/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"names":["React","PureComponent","PropTypes","SwipeRow","SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","e","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","swipeGestureEnded","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","Animated","ref","listViewRef","VisibleComponent","HiddenComponent","item","shouldPreviewRow","cloneElement","row","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","rowSwipeGestureEnded","onSwipeValueChange","data","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","SectionList","propTypes","func","number","bool","oneOfType","object","ViewPropTypes","style","string","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Animated,\n    FlatList,\n    Platform,\n    SectionList,\n    ViewPropTypes,\n} from 'react-native';\n\nimport SwipeRow from './SwipeRow';\n\n/**\n * ListView that renders SwipeRows.\n */\nclass SwipeListView extends PureComponent {\n    constructor(props) {\n        super(props);\n        this._rows = {};\n        this.openCellKey = null;\n        this.listViewProps = {};\n        if (Platform.OS === 'ios') {\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\n            this.yScrollOffset = 0;\n            this.layoutHeight = 0;\n            this.listViewProps = {\n                onLayout: e => this.onLayout(e),\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\n            };\n        }\n        this._onScroll = this.onScroll.bind(this);\n        if (typeof this.props.onScroll === 'object') {\n            // Animated.event\n            this.props.onScroll.__addListener(this._onScroll);\n            this._onScroll = this.props.onScroll;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.refreshing) {\n            this.safeCloseOpenRow();\n        }\n    }\n\n    setScrollEnabled(enable) {\n        if (this.props.scrollEnabled === false) {\n            return;\n        }\n        // Due to multiple issues reported across different versions of RN\n        // We do this in the safest way possible...\n        if (this._listView && this._listView.setNativeProps) {\n            this._listView.setNativeProps({ scrollEnabled: enable });\n        } else if (this._listView && this._listView.getScrollResponder) {\n            const scrollResponder = this._listView.getScrollResponder();\n            scrollResponder.setNativeProps &&\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\n        }\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n\n    safeCloseOpenRow() {\n        const rowRef = this._rows[this.openCellKey];\n        if (rowRef && rowRef.closeRow) {\n            this._rows[this.openCellKey].closeRow();\n        }\n    }\n\n    rowSwipeGestureBegan(key) {\n        if (\n            this.props.closeOnRowBeginSwipe &&\n            this.openCellKey &&\n            this.openCellKey !== key\n        ) {\n            this.safeCloseOpenRow();\n        }\n\n        if (this.props.swipeGestureBegan) {\n            this.props.swipeGestureBegan(key);\n        }\n    }\n\n    rowSwipeGestureEnded(key) {\n        if (this.props.swipeGestureEnded) {\n            this.props.swipeGestureEnded(key);\n        }\n    }\n\n    onRowOpen(key, toValue) {\n        if (\n            this.openCellKey &&\n            this.openCellKey !== key &&\n            this.props.closeOnRowOpen &&\n            !this.props.closeOnRowBeginSwipe\n        ) {\n            this.safeCloseOpenRow();\n        }\n        this.openCellKey = key;\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n\n    onRowPress() {\n        if (this.openCellKey) {\n            if (this.props.closeOnRowPress) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n    }\n\n    onScroll(e) {\n        if (Platform.OS === 'ios') {\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\n        }\n        if (this.openCellKey) {\n            if (this.props.closeOnScroll) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n\n    onLayout(e) {\n        this.layoutHeight = e.nativeEvent.layout.height;\n        this.props.onLayout && this.props.onLayout(e);\n    }\n\n    // When deleting rows on iOS, the list may end up being over-scrolled,\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\n    // when that happens, which will make sure the list is kept in bounds.\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\n    onContentSizeChange(w, h) {\n        const height = h - this.layoutHeight;\n        if (this.yScrollOffset >= height && height > 0) {\n            if (this._listView instanceof FlatList) {\n                this._listView && this._listView.scrollToEnd();\n            } else if (this._listView instanceof Animated.FlatList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            }\n        }\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n\n    setRefs(ref) {\n        this._listView = ref;\n        this.props.listViewRef && this.props.listViewRef(ref);\n    }\n\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n        if (!HiddenComponent) {\n            return React.cloneElement(VisibleComponent, {\n                ...VisibleComponent.props,\n                ref: row => (this._rows[key] = row),\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\n                onRowDidOpen: toValue =>\n                    this.props.onRowDidOpen &&\n                    this.props.onRowDidOpen(key, this._rows, toValue),\n                onRowClose: () =>\n                    this.props.onRowClose &&\n                    this.props.onRowClose(key, this._rows),\n                onRowDidClose: () =>\n                    this.props.onRowDidClose &&\n                    this.props.onRowDidClose(key, this._rows),\n                onRowPress: () => this.onRowPress(),\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\n                swipeGestureEnded: () => this.rowSwipeGestureEnded(key),\n            });\n        } else {\n            return (\n                <SwipeRow\n                    onSwipeValueChange={\n                        this.props.onSwipeValueChange\n                            ? data =>\n                                  this.props.onSwipeValueChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    ref={row => (this._rows[key] = row)}\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\n                    swipeGestureEnded={() => this.rowSwipeGestureEnded(key)}\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\n                    onRowDidOpen={toValue =>\n                        this.props.onRowDidOpen &&\n                        this.props.onRowDidOpen(key, this._rows, toValue)\n                    }\n                    onRowClose={() =>\n                        this.props.onRowClose &&\n                        this.props.onRowClose(key, this._rows)\n                    }\n                    onRowDidClose={() =>\n                        this.props.onRowDidClose &&\n                        this.props.onRowDidClose(key, this._rows)\n                    }\n                    onRowPress={() => this.onRowPress(key)}\n                    shouldItemUpdate={\n                        this.props.shouldItemUpdate\n                            ? (currentItem, newItem) =>\n                                  this.props.shouldItemUpdate(\n                                      currentItem,\n                                      newItem\n                                  )\n                            : null\n                    }\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\n                    leftOpenValue={\n                        item.leftOpenValue || this.props.leftOpenValue\n                    }\n                    rightOpenValue={\n                        item.rightOpenValue || this.props.rightOpenValue\n                    }\n                    closeOnRowPress={\n                        item.closeOnRowPress || this.props.closeOnRowPress\n                    }\n                    disableLeftSwipe={\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\n                    }\n                    disableRightSwipe={\n                        item.disableRightSwipe || this.props.disableRightSwipe\n                    }\n                    stopLeftSwipe={\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\n                    }\n                    stopRightSwipe={\n                        item.stopRightSwipe || this.props.stopRightSwipe\n                    }\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n                    disableHiddenLayoutCalculation={\n                        this.props.disableHiddenLayoutCalculation\n                    }\n                    style={this.props.swipeRowStyle}\n                    preview={shouldPreviewRow}\n                    previewDuration={this.props.previewDuration}\n                    previewOpenDelay={this.props.previewOpenDelay}\n                    previewOpenValue={this.props.previewOpenValue}\n                    previewRepeat={this.props.previewRepeat}\n                    previewRepeatDelay={this.props.previewRepeatDelay}\n                    tension={this.props.tension}\n                    restSpeedThreshold={this.props.restSpeedThreshold}\n                    restDisplacementThreshold={\n                        this.props.restDisplacementThreshold\n                    }\n                    friction={this.props.friction}\n                    directionalDistanceChangeThreshold={\n                        this.props.directionalDistanceChangeThreshold\n                    }\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\n                    swipeToOpenVelocityContribution={\n                        this.props.swipeToOpenVelocityContribution\n                    }\n                    swipeToClosePercent={this.props.swipeToClosePercent}\n                    item={item} // used for should item update comparisons\n                    useNativeDriver={this.props.useNativeDriver}\n                >\n                    {HiddenComponent}\n                    {VisibleComponent}\n                </SwipeRow>\n            );\n        }\n    }\n\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\n    renderRow(rowData, secId, rowId, rowMap) {\n        const key = `${secId}${rowId}`;\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenRow &&\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n        const previewRowId =\n            this.props.dataSource &&\n            this.props.dataSource.getRowIDForFlatIndex(\n                this.props.previewRowIndex || 0\n            );\n        const shouldPreviewRow =\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\n            rowId === previewRowId;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            rowData,\n            shouldPreviewRow\n        );\n    }\n\n    renderItem(rowData, rowMap) {\n        const Component = this.props.renderItem(rowData, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenItem &&\n            this.props.renderHiddenItem(rowData, rowMap);\n        const { item, index } = rowData;\n        let { key } = item;\n        if (!key && this.props.keyExtractor) {\n            key = this.props.keyExtractor(item, index);\n        }\n\n        const shouldPreviewRow =\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            item,\n            shouldPreviewRow\n        );\n    }\n\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\n\n    _onRef = c => this.setRefs(c);\n\n    render() {\n        const { useSectionList, renderListView, ...props } = this.props;\n\n        if (renderListView) {\n            // Ideally renderRow should be deprecated. We do this check for\n            // legacy purposes to not break certain renderListView cases\n            const useRenderRow = !!this.props.renderRow;\n            return renderListView(\n                props,\n                this.setRefs.bind(this),\n                this.onScroll.bind(this),\n                useRenderRow\n                    ? this.renderRow.bind(this, this._rows)\n                    : this.renderItem.bind(this)\n            );\n        }\n\n        if (useSectionList) {\n            const ListComponent = this.props.useAnimatedList\n                ? Animated.SectionList\n                : SectionList;\n            return (\n                <ListComponent\n                    {...props}\n                    {...this.listViewProps}\n                    ref={this._onRef}\n                    onScroll={this._onScroll}\n                    renderItem={this._renderItem}\n                />\n            );\n        }\n        const ListComponent = this.props.useAnimatedList\n            ? Animated.FlatList\n            : FlatList;\n        return (\n            <ListComponent\n                {...props}\n                {...this.listViewProps}\n                ref={this._onRef}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n            />\n        );\n    }\n}\n\nSwipeListView.propTypes = {\n    /**\n     * To render a custom ListView component, if you don't want to use ReactNative one.\n     * Note: This will call `renderRow`, not `renderItem`\n     */\n    renderListView: PropTypes.func,\n    /**\n     * How to render a row in a FlatList. Should return a valid React Element.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\n     * This is required unless renderItem is passing a SwipeRow.\n     */\n    renderHiddenItem: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Should open rows be closed when the listView begins scrolling\n     */\n    closeOnScroll: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row is pressed\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row begins to swipe open\n     */\n    closeOnRowBeginSwipe: PropTypes.bool,\n    /**\n     * Should open rows be closed when another row is opened\n     */\n    closeOnRowOpen: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always.\n     *\n     * By default, hidden row size calculations are only done on the first onLayout event\n     * for performance reasons.\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\n     * You may want to do this if your rows' sizes can change.\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     *\n     * Instead, {width: '100%', height: '100%'} will be used.\n     * Improves performance by avoiding component updates, while still working with orientation changes.\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating swipe\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when scrolling on the SwipeListView has been enabled/disabled\n     */\n    onScrollEnabled: PropTypes.func,\n    /**\n     * Called when a scroll event is emitted\n     */\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    swipeRowStyle: ViewPropTypes.style,\n    /**\n     * Called when the FlatList ref is set and passes a ref to the FlatList\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\n     */\n    listViewRef: PropTypes.func,\n    /**\n     * Should the row with this key do a slide out preview to show that the list is swipeable\n     */\n    previewRowKey: PropTypes.string,\n    /**\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\n     */\n    previewFirstRow: PropTypes.bool,\n    /**\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\n     * Note: This ID will be passed to this function to get the correct row index\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\n     */\n    previewRowIndex: PropTypes.number,\n    /**\n     * Duration of the slide out preview animation (milliseconds)\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\n     */\n    previewOpenDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of a SwipeRow is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Use Animated.Flatlist or Animated.Sectionlist\n     */\n    useAnimatedList: PropTypes.bool,\n};\n\nSwipeListView.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    closeOnRowOpen: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n    useAnimatedList: false,\n};\n\nexport default SwipeListView;\n"]},"metadata":{},"sourceType":"module"}
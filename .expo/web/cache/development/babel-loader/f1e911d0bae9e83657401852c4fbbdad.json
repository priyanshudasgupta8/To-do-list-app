{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Projects\\\\To-Do List App\\\\to-do-list\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeRow.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nvar DEFAULT_PREVIEW_OPEN_DELAY = 700;\nvar PREVIEW_CLOSE_DELAY = 300;\nvar MAX_VELOCITY_CONTRIBUTION = 5;\nvar SCROLL_LOCK_MILLISECONDS = 300;\n\nvar SwipeRow = function (_Component) {\n  _inherits(SwipeRow, _Component);\n\n  var _super = _createSuper(SwipeRow);\n\n  function SwipeRow(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeRow);\n\n    _this = _super.call(this, props);\n\n    _this.ensureScrollEnabled = function () {\n      if (!_this.parentScrollEnabled) {\n        _this.parentScrollEnabled = true;\n        _this.props.setScrollEnabled && _this.props.setScrollEnabled(true);\n      }\n    };\n\n    _this.combinedOnPress = function () {\n      var onPress = _this.props.children[1].props.onPress;\n\n      _this.onRowPress();\n\n      onPress && onPress.apply(void 0, arguments);\n    };\n\n    _this.isOpen = false;\n    _this.previousTrackedTranslateX = 0;\n    _this.currentTranslateX = 0;\n    _this.previousTrackedDirection = null;\n    _this.horizontalSwipeGestureBegan = false;\n    _this.swipeInitialX = null;\n    _this.parentScrollEnabled = true;\n    _this.ranPreview = false;\n    _this._ensureScrollEnabledTimer = null;\n    _this.isForceClosing = false;\n    _this.state = {\n      previewRepeatInterval: null,\n      timeBetweenPreviewRepeats: null,\n      dimensionsSet: false,\n      hiddenHeight: _this.props.disableHiddenLayoutCalculation ? '100%' : 0,\n      hiddenWidth: _this.props.disableHiddenLayoutCalculation ? '100%' : 0\n    };\n    _this._translateX = new Animated.Value(0);\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {\n        return _this.handleOnMoveShouldSetPanResponder(e, gs);\n      },\n      onPanResponderMove: function onPanResponderMove(e, gs) {\n        return _this.handlePanResponderMove(e, gs);\n      },\n      onPanResponderRelease: function onPanResponderRelease(e, gs) {\n        return _this.handlePanResponderRelease(e, gs);\n      },\n      onPanResponderTerminate: function onPanResponderTerminate(e, gs) {\n        return _this.handlePanResponderEnd(e, gs);\n      },\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n        return false;\n      }\n    });\n\n    _this._translateX.addListener(function (_ref) {\n      var value = _ref.value;\n      _this.currentTranslateX = value;\n\n      if (_this.props.onSwipeValueChange) {\n        var direction = _this.previousTrackedDirection;\n\n        if (value !== _this.previousTrackedTranslateX) {\n          direction = value > _this.previousTrackedTranslateX ? 'right' : 'left';\n        }\n\n        _this.props.onSwipeValueChange && _this.props.onSwipeValueChange({\n          isOpen: _this.isOpen,\n          direction: direction,\n          value: value,\n          key: _this.props.swipeKey\n        });\n        _this.previousTrackedTranslateX = value;\n        _this.previousTrackedDirection = direction;\n      }\n    });\n\n    if (_this.props.forceCloseToRightThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref2) {\n        var value = _ref2.value;\n\n        if (!_this.isForceClosing && Dimensions.get('window').width + value < _this.props.forceCloseToRightThreshold) {\n          _this.isForceClosing = true;\n\n          _this.forceCloseRow('right');\n\n          if (_this.props.onForceCloseToRight) {\n            _this.props.onForceCloseToRight();\n          }\n        }\n      });\n    }\n\n    if (_this.props.forceCloseToLeftThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref3) {\n        var value = _ref3.value;\n\n        if (!_this.isForceClosing && Dimensions.get('window').width - value < _this.props.forceCloseToLeftThreshold) {\n          _this.isForceClosing = true;\n\n          _this.forceCloseRow('left');\n\n          if (_this.props.onForceCloseToLeft) {\n            _this.props.onForceCloseToLeft();\n          }\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeRow, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._ensureScrollEnabledTimer);\n\n      this._translateX.removeAllListeners();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.hiddenHeight !== nextState.hiddenHeight || this.state.hiddenWidth !== nextState.hiddenWidth || !this.props.shouldItemUpdate || this.props.shouldItemUpdate && this.props.shouldItemUpdate(this.props.item, nextProps.item)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getPreviewAnimation\",\n    value: function getPreviewAnimation(toValue, delay) {\n      return Animated.timing(this._translateX, {\n        duration: this.props.previewDuration,\n        toValue: toValue,\n        delay: delay,\n        useNativeDriver: this.props.useNativeDriver\n      });\n    }\n  }, {\n    key: \"onContentLayout\",\n    value: function onContentLayout(e) {\n      var _this2 = this;\n\n      this.setState(_objectSpread({\n        dimensionsSet: !this.props.recalculateHiddenLayout\n      }, !this.props.disableHiddenLayoutCalculation ? {\n        hiddenHeight: e.nativeEvent.layout.height,\n        hiddenWidth: e.nativeEvent.layout.width\n      } : {}));\n\n      if (this.props.preview && !this.ranPreview) {\n        this.ranPreview = true;\n        this.doFullAnimation();\n\n        if (this.props.previewRepeat) {\n          this.setState({\n            previewRepeatInterval: setInterval(function () {\n              _this2.doFullAnimation();\n            }, this.state.timeBetweenPreviewRepeats)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"doFullAnimation\",\n    value: function doFullAnimation() {\n      var _this3 = this;\n\n      var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n      return this.getPreviewAnimation(previewOpenValue, this.props.previewOpenDelay).start(function () {\n        _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n      });\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.props.onRowPress) {\n        this.props.onRowPress();\n      } else {\n        if (this.props.closeOnRowPress) {\n          this.closeRow();\n        }\n      }\n    }\n  }, {\n    key: \"handleOnMoveShouldSetPanResponder\",\n    value: function handleOnMoveShouldSetPanResponder(e, gs) {\n      var dx = gs.dx;\n      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      if (this.isForceClosing) {\n        return;\n      }\n\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n      var absDx = Math.abs(dx);\n      var absDy = Math.abs(dy);\n\n      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {\n        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n          return;\n        }\n\n        if (this.parentScrollEnabled) {\n          this.parentScrollEnabled = false;\n          this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n        }\n\n        if (this.swipeInitialX === null) {\n          this.swipeInitialX = this.currentTranslateX;\n        }\n\n        if (!this.horizontalSwipeGestureBegan) {\n          this.horizontalSwipeGestureBegan = true;\n          this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n        }\n\n        var newDX = this.swipeInitialX + dx;\n\n        if (this.props.disableLeftSwipe && newDX < 0) {\n          newDX = 0;\n        }\n\n        if (this.props.disableRightSwipe && newDX > 0) {\n          newDX = 0;\n        }\n\n        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n          newDX = this.props.stopLeftSwipe;\n        }\n\n        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n          newDX = this.props.stopRightSwipe;\n        }\n\n        this._translateX.setValue(newDX);\n      }\n    }\n  }, {\n    key: \"handlePanResponderRelease\",\n    value: function handlePanResponderRelease(e, gestureState) {\n      this.props.swipeGestureEnded && this.props.swipeGestureEnded();\n      this.handlePanResponderEnd(e, gestureState);\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      var _this4 = this;\n\n      if (this.isForceClosing) {\n        setTimeout(function () {\n          _this4.isForceClosing = false;\n        }, 500);\n      }\n\n      var swipeToOpenVelocityContribution = this.props.swipeToOpenVelocityContribution;\n      var possibleExtraPixels = this.props.rightOpenValue * swipeToOpenVelocityContribution;\n      var clampedVelocity = Math.min(gestureState.vx, MAX_VELOCITY_CONTRIBUTION);\n      var projectedExtraPixels = possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\n      this._ensureScrollEnabledTimer = setTimeout(this.ensureScrollEnabled, SCROLL_LOCK_MILLISECONDS);\n      var toValue = 0;\n\n      if (this.currentTranslateX >= 0) {\n        if (this.swipeInitialX < this.currentTranslateX) {\n          if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {\n            toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n          }\n        } else {\n          if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (1 - this.props.swipeToClosePercent / 100)) {\n            toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n          }\n        }\n      } else {\n        if (this.props.disableLeftSwipe) {\n          return;\n        }\n\n        if (this.swipeInitialX > this.currentTranslateX) {\n          if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {\n            toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n          }\n        } else {\n          if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue * (1 - this.props.swipeToClosePercent / 100)) {\n            toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n          }\n        }\n      }\n\n      this.manuallySwipeRow(toValue);\n    }\n  }, {\n    key: \"closeRow\",\n    value: function closeRow() {\n      this.manuallySwipeRow(0);\n    }\n  }, {\n    key: \"forceCloseRow\",\n    value: function forceCloseRow(direction) {\n      var _this5 = this;\n\n      this.manuallySwipeRow(0, function () {\n        if (direction === 'right' && _this5.props.onForceCloseToRightEnd) {\n          _this5.props.onForceCloseToRightEnd();\n        } else if (direction === 'left' && _this5.props.onForceCloseToLeftEnd) {\n          _this5.props.onForceCloseToLeftEnd();\n        }\n      });\n    }\n  }, {\n    key: \"closeRowWithoutAnimation\",\n    value: function closeRowWithoutAnimation() {\n      this._translateX.setValue(0);\n\n      this.ensureScrollEnabled();\n      this.isOpen = false;\n      this.props.onRowDidClose && this.props.onRowDidClose();\n      this.props.onRowClose && this.props.onRowClose();\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"manuallySwipeRow\",\n    value: function manuallySwipeRow(toValue, onAnimationEnd) {\n      var _this6 = this;\n\n      Animated.spring(this._translateX, {\n        toValue: toValue,\n        friction: this.props.friction,\n        tension: this.props.tension,\n        restSpeedThreshold: this.props.restSpeedThreshold,\n        restDisplacementThreshold: this.props.restDisplacementThreshold,\n        useNativeDriver: this.props.useNativeDriver\n      }).start(function () {\n        _this6.ensureScrollEnabled();\n\n        if (toValue === 0) {\n          _this6.isOpen = false;\n          _this6.props.onRowDidClose && _this6.props.onRowDidClose();\n        } else {\n          _this6.isOpen = true;\n          _this6.props.onRowDidOpen && _this6.props.onRowDidOpen(toValue);\n        }\n\n        if (onAnimationEnd) {\n          onAnimationEnd();\n        }\n      });\n\n      if (toValue === 0) {\n        this.props.onRowClose && this.props.onRowClose();\n      } else {\n        this.props.onRowOpen && this.props.onRowOpen(toValue);\n      }\n\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"renderVisibleContent\",\n    value: function renderVisibleContent() {\n      if (!this.props.closeOnRowPress) {\n        return this.props.children[1];\n      }\n\n      var onPress = this.props.children[1].props.onPress;\n\n      if (onPress) {\n        return React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          onPress: this.combinedOnPress\n        }));\n      }\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: this.combinedOnPress,\n        accessible: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }\n      }, this.props.children[1]);\n    }\n  }, {\n    key: \"renderRowContent\",\n    value: function renderRowContent() {\n      var _this7 = this;\n\n      if (this.state.dimensionsSet) {\n        return React.createElement(Animated.View, _extends({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers, {\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 17\n          }\n        }), this.renderVisibleContent());\n      } else {\n        return React.createElement(Animated.View, _extends({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers, {\n          onLayout: function onLayout(e) {\n            return _this7.onContentLayout(e);\n          },\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 17\n          }\n        }), this.renderVisibleContent());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: this.props.style ? this.props.style : styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [styles.hidden, {\n          height: this.state.hiddenHeight,\n          width: this.state.hiddenWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 17\n        }\n      }, this.props.children[0]), this.renderRowContent());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (!nextProps.previewRepeat) {\n        clearInterval(prevState.previewRepeatInterval);\n        prevState.previewRepeatInterval = null;\n      }\n\n      prevState.timeBetweenPreviewRepeats = nextProps.previewDuration * 2 + nextProps.previewOpenDelay + PREVIEW_CLOSE_DELAY + nextProps.previewRepeatDelay;\n      return prevState;\n    }\n  }]);\n\n  return SwipeRow;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {},\n  hidden: {\n    zIndex: 1,\n    bottom: 0,\n    left: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n});\nSwipeRow.propTypes = {\n  setScrollEnabled: PropTypes.func,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  closeOnRowPress: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  style: ViewPropTypes.style,\n  preview: PropTypes.bool,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  forceCloseToLeftThreshold: PropTypes.number,\n  forceCloseToRightThreshold: PropTypes.number,\n  onForceCloseToLeft: PropTypes.func,\n  onForceCloseToRight: PropTypes.func,\n  onForceCloseToLeftEnd: PropTypes.func,\n  onForceCloseToRightEnd: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  swipeKey: PropTypes.string\n};\nSwipeRow.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  preview: false,\n  previewDuration: 300,\n  previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  item: {},\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000\n};\nexport default SwipeRow;","map":{"version":3,"sources":["F:/Projects/To-Do List App/to-do-list/node_modules/react-native-swipe-list-view/components/SwipeRow.js"],"names":["React","Component","PropTypes","DEFAULT_PREVIEW_OPEN_DELAY","PREVIEW_CLOSE_DELAY","MAX_VELOCITY_CONTRIBUTION","SCROLL_LOCK_MILLISECONDS","SwipeRow","props","ensureScrollEnabled","parentScrollEnabled","setScrollEnabled","combinedOnPress","onPress","children","onRowPress","isOpen","previousTrackedTranslateX","currentTranslateX","previousTrackedDirection","horizontalSwipeGestureBegan","swipeInitialX","ranPreview","_ensureScrollEnabledTimer","isForceClosing","state","previewRepeatInterval","timeBetweenPreviewRepeats","dimensionsSet","hiddenHeight","disableHiddenLayoutCalculation","hiddenWidth","_translateX","Animated","Value","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","e","gs","handleOnMoveShouldSetPanResponder","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderRelease","onPanResponderTerminate","handlePanResponderEnd","onShouldBlockNativeResponder","addListener","value","onSwipeValueChange","direction","key","swipeKey","forceCloseToRightThreshold","Dimensions","get","width","forceCloseRow","onForceCloseToRight","forceCloseToLeftThreshold","onForceCloseToLeft","clearTimeout","removeAllListeners","nextProps","nextState","shouldItemUpdate","item","toValue","delay","timing","duration","previewDuration","useNativeDriver","setState","recalculateHiddenLayout","nativeEvent","layout","height","preview","doFullAnimation","previewRepeat","setInterval","previewOpenValue","rightOpenValue","getPreviewAnimation","previewOpenDelay","start","closeOnRowPress","closeRow","dx","Math","abs","directionalDistanceChangeThreshold","gestureState","dy","absDx","absDy","swipeGestureBegan","newDX","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","setValue","swipeGestureEnded","setTimeout","swipeToOpenVelocityContribution","possibleExtraPixels","clampedVelocity","min","vx","projectedExtraPixels","leftOpenValue","swipeToOpenPercent","swipeToClosePercent","manuallySwipeRow","onForceCloseToRightEnd","onForceCloseToLeftEnd","onRowDidClose","onRowClose","onAnimationEnd","spring","friction","tension","restSpeedThreshold","restDisplacementThreshold","onRowDidOpen","onRowOpen","cloneElement","panHandlers","zIndex","transform","translateX","renderVisibleContent","onContentLayout","style","styles","container","hidden","renderRowContent","prevState","clearInterval","previewRepeatDelay","StyleSheet","bottom","left","overflow","position","right","top","propTypes","func","number","bool","ViewPropTypes","node","isRequired","string","defaultProps"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;;;AAWA,IAAMC,0BAA0B,GAAG,GAAnC;AACA,IAAMC,mBAAmB,GAAG,GAA5B;AACA,IAAMC,yBAAyB,GAAG,CAAlC;AACA,IAAMC,wBAAwB,GAAG,GAAjC;;IAYMC,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAwPnBC,mBAxPmB,GAwPG,YAAM;AACxB,UAAI,CAAC,MAAKC,mBAAV,EAA+B;AAC3B,cAAKA,mBAAL,GAA2B,IAA3B;AACA,cAAKF,KAAL,CAAWG,gBAAX,IAA+B,MAAKH,KAAL,CAAWG,gBAAX,CAA4B,IAA5B,CAA/B;AACH;AACJ,KA7PkB;;AAAA,UAkanBC,eAlamB,GAkaD,YAAa;AAC3B,UAAMC,OAAO,GAAG,MAAKL,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAAvB,CAA6BK,OAA7C;;AACA,YAAKE,UAAL;;AACAF,MAAAA,OAAO,IAAIA,OAAO,MAAP,mBAAX;AACH,KAtakB;;AAEf,UAAKG,MAAL,GAAc,KAAd;AACA,UAAKC,yBAAL,GAAiC,CAAjC;AACA,UAAKC,iBAAL,GAAyB,CAAzB;AACA,UAAKC,wBAAL,GAAgC,IAAhC;AACA,UAAKC,2BAAL,GAAmC,KAAnC;AACA,UAAKC,aAAL,GAAqB,IAArB;AACA,UAAKX,mBAAL,GAA2B,IAA3B;AACA,UAAKY,UAAL,GAAkB,KAAlB;AACA,UAAKC,yBAAL,GAAiC,IAAjC;AACA,UAAKC,cAAL,GAAsB,KAAtB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,qBAAqB,EAAE,IADd;AAETC,MAAAA,yBAAyB,EAAE,IAFlB;AAGTC,MAAAA,aAAa,EAAE,KAHN;AAITC,MAAAA,YAAY,EAAE,MAAKrB,KAAL,CAAWsB,8BAAX,GACR,MADQ,GAER,CANG;AAOTC,MAAAA,WAAW,EAAE,MAAKvB,KAAL,CAAWsB,8BAAX,GAA4C,MAA5C,GAAqD;AAPzD,KAAb;AASA,UAAKE,WAAL,GAAmB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAnB;AAEA,UAAKC,aAAL,GAAqBC,YAAY,CAACC,MAAb,CAAoB;AACrCC,MAAAA,2BAA2B,EAAE,qCAACC,CAAD,EAAIC,EAAJ;AAAA,eACzB,MAAKC,iCAAL,CAAuCF,CAAvC,EAA0CC,EAA1C,CADyB;AAAA,OADQ;AAGrCE,MAAAA,kBAAkB,EAAE,4BAACH,CAAD,EAAIC,EAAJ;AAAA,eAAW,MAAKG,sBAAL,CAA4BJ,CAA5B,EAA+BC,EAA/B,CAAX;AAAA,OAHiB;AAIrCI,MAAAA,qBAAqB,EAAE,+BAACL,CAAD,EAAIC,EAAJ;AAAA,eACnB,MAAKK,yBAAL,CAA+BN,CAA/B,EAAkCC,EAAlC,CADmB;AAAA,OAJc;AAMrCM,MAAAA,uBAAuB,EAAE,iCAACP,CAAD,EAAIC,EAAJ;AAAA,eACrB,MAAKO,qBAAL,CAA2BR,CAA3B,EAA8BC,EAA9B,CADqB;AAAA,OANY;AAQrCQ,MAAAA,4BAA4B,EAAE;AAAA,eAAM,KAAN;AAAA;AARO,KAApB,CAArB;;AAWA,UAAKhB,WAAL,CAAiBiB,WAAjB,CAA6B,gBAAe;AAAA,UAAZC,KAAY,QAAZA,KAAY;AACxC,YAAKhC,iBAAL,GAAyBgC,KAAzB;;AACA,UAAI,MAAK1C,KAAL,CAAW2C,kBAAf,EAAmC;AAC/B,YAAIC,SAAS,GAAG,MAAKjC,wBAArB;;AACA,YAAI+B,KAAK,KAAK,MAAKjC,yBAAnB,EAA8C;AAC1CmC,UAAAA,SAAS,GACLF,KAAK,GAAG,MAAKjC,yBAAb,GACM,OADN,GAEM,MAHV;AAIH;;AACD,cAAKT,KAAL,CAAW2C,kBAAX,IACI,MAAK3C,KAAL,CAAW2C,kBAAX,CAA8B;AAC1BnC,UAAAA,MAAM,EAAE,MAAKA,MADa;AAE1BoC,UAAAA,SAAS,EAATA,SAF0B;AAG1BF,UAAAA,KAAK,EAALA,KAH0B;AAI1BG,UAAAA,GAAG,EAAE,MAAK7C,KAAL,CAAW8C;AAJU,SAA9B,CADJ;AAOA,cAAKrC,yBAAL,GAAiCiC,KAAjC;AACA,cAAK/B,wBAAL,GAAgCiC,SAAhC;AACH;AACJ,KApBD;;AAsBA,QACI,MAAK5C,KAAL,CAAW+C,0BAAX,IACA,MAAK/C,KAAL,CAAW+C,0BAAX,GAAwC,CAF5C,EAGE;AACE,YAAKvB,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;AAAA,YAAZC,KAAY,SAAZA,KAAY;;AACxC,YACI,CAAC,MAAK1B,cAAN,IACAgC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCR,KAAjC,GACI,MAAK1C,KAAL,CAAW+C,0BAHnB,EAIE;AACE,gBAAK/B,cAAL,GAAsB,IAAtB;;AACA,gBAAKmC,aAAL,CAAmB,OAAnB;;AACA,cAAI,MAAKnD,KAAL,CAAWoD,mBAAf,EAAoC;AAChC,kBAAKpD,KAAL,CAAWoD,mBAAX;AACH;AACJ;AACJ,OAZD;AAaH;;AAED,QACI,MAAKpD,KAAL,CAAWqD,yBAAX,IACA,MAAKrD,KAAL,CAAW+C,0BAAX,GAAwC,CAF5C,EAGE;AACE,YAAKvB,WAAL,CAAiBiB,WAAjB,CAA6B,iBAAe;AAAA,YAAZC,KAAY,SAAZA,KAAY;;AACxC,YACI,CAAC,MAAK1B,cAAN,IACAgC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCR,KAAjC,GACI,MAAK1C,KAAL,CAAWqD,yBAHnB,EAIE;AACE,gBAAKrC,cAAL,GAAsB,IAAtB;;AACA,gBAAKmC,aAAL,CAAmB,MAAnB;;AACA,cAAI,MAAKnD,KAAL,CAAWsD,kBAAf,EAAmC;AAC/B,kBAAKtD,KAAL,CAAWsD,kBAAX;AACH;AACJ;AACJ,OAZD;AAaH;;AA5Fc;AA6FlB;;;;2CAEsB;AACnBC,MAAAA,YAAY,CAAC,KAAKxC,yBAAN,CAAZ;;AACA,WAAKS,WAAL,CAAiBgC,kBAAjB;AACH;;;0CAEqBC,S,EAAWC,S,EAAW;AACxC,UACI,KAAKzC,KAAL,CAAWI,YAAX,KAA4BqC,SAAS,CAACrC,YAAtC,IACA,KAAKJ,KAAL,CAAWM,WAAX,KAA2BmC,SAAS,CAACnC,WADrC,IAEA,CAAC,KAAKvB,KAAL,CAAW2D,gBAFZ,IAGC,KAAK3D,KAAL,CAAW2D,gBAAX,IACG,KAAK3D,KAAL,CAAW2D,gBAAX,CAA4B,KAAK3D,KAAL,CAAW4D,IAAvC,EAA6CH,SAAS,CAACG,IAAvD,CALR,EAME;AACE,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH;;;wCAemBC,O,EAASC,K,EAAO;AAChC,aAAOrC,QAAQ,CAACsC,MAAT,CAAgB,KAAKvC,WAArB,EAAkC;AACrCwC,QAAAA,QAAQ,EAAE,KAAKhE,KAAL,CAAWiE,eADgB;AAErCJ,QAAAA,OAAO,EAAPA,OAFqC;AAGrCC,QAAAA,KAAK,EAALA,KAHqC;AAIrCI,QAAAA,eAAe,EAAE,KAAKlE,KAAL,CAAWkE;AAJS,OAAlC,CAAP;AAMH;;;oCAEenC,C,EAAG;AAAA;;AACf,WAAKoC,QAAL;AACI/C,QAAAA,aAAa,EAAE,CAAC,KAAKpB,KAAL,CAAWoE;AAD/B,SAEQ,CAAC,KAAKpE,KAAL,CAAWsB,8BAAZ,GACE;AACID,QAAAA,YAAY,EAAEU,CAAC,CAACsC,WAAF,CAAcC,MAAd,CAAqBC,MADvC;AAEIhD,QAAAA,WAAW,EAAEQ,CAAC,CAACsC,WAAF,CAAcC,MAAd,CAAqBpB;AAFtC,OADF,GAKE,EAPV;;AAUA,UAAI,KAAKlD,KAAL,CAAWwE,OAAX,IAAsB,CAAC,KAAK1D,UAAhC,EAA4C;AACxC,aAAKA,UAAL,GAAkB,IAAlB;AACA,aAAK2D,eAAL;;AACA,YAAI,KAAKzE,KAAL,CAAW0E,aAAf,EAA8B;AAC1B,eAAKP,QAAL,CAAc;AACVjD,YAAAA,qBAAqB,EAAEyD,WAAW,CAAC,YAAM;AACrC,cAAA,MAAI,CAACF,eAAL;AACH,aAFiC,EAE/B,KAAKxD,KAAL,CAAWE,yBAFoB;AADxB,WAAd;AAKH;AACJ;AACJ;;;sCAEiB;AAAA;;AACd,UAAMyD,gBAAgB,GAClB,KAAK5E,KAAL,CAAW4E,gBAAX,IAA+B,KAAK5E,KAAL,CAAW6E,cAAX,GAA4B,GAD/D;AAEA,aAAO,KAAKC,mBAAL,CACHF,gBADG,EAEH,KAAK5E,KAAL,CAAW+E,gBAFR,EAGLC,KAHK,CAGC,YAAM;AACV,QAAA,MAAI,CAACF,mBAAL,CAAyB,CAAzB,EAA4BlF,mBAA5B,EAAiDoF,KAAjD;AACH,OALM,CAAP;AAMH;;;iCAEY;AACT,UAAI,KAAKhF,KAAL,CAAWO,UAAf,EAA2B;AACvB,aAAKP,KAAL,CAAWO,UAAX;AACH,OAFD,MAEO;AACH,YAAI,KAAKP,KAAL,CAAWiF,eAAf,EAAgC;AAC5B,eAAKC,QAAL;AACH;AACJ;AACJ;;;sDAEiCnD,C,EAAGC,E,EAAI;AAAA,UAC7BmD,EAD6B,GACtBnD,EADsB,CAC7BmD,EAD6B;AAErC,aAAOC,IAAI,CAACC,GAAL,CAASF,EAAT,IAAe,KAAKnF,KAAL,CAAWsF,kCAAjC;AACH;;;2CAEsBvD,C,EAAGwD,Y,EAAc;AAEpC,UAAI,KAAKvE,cAAT,EAAyB;AACrB;AACH;;AAJmC,UAO5BmE,EAP4B,GAOjBI,YAPiB,CAO5BJ,EAP4B;AAAA,UAOxBK,EAPwB,GAOjBD,YAPiB,CAOxBC,EAPwB;AAQpC,UAAMC,KAAK,GAAGL,IAAI,CAACC,GAAL,CAASF,EAAT,CAAd;AACA,UAAMO,KAAK,GAAGN,IAAI,CAACC,GAAL,CAASG,EAAT,CAAd;;AAIA,UACIC,KAAK,GAAG,KAAKzF,KAAL,CAAWsF,kCAAnB,IACAI,KAAK,GAAG,KAAK1F,KAAL,CAAWsF,kCAFvB,EAGE;AAEE,YAAII,KAAK,GAAGD,KAAR,IAAiB,CAAC,KAAK7E,2BAA3B,EAAwD;AAEpD;AACH;;AAGD,YAAI,KAAKV,mBAAT,EAA8B;AAE1B,eAAKA,mBAAL,GAA2B,KAA3B;AACA,eAAKF,KAAL,CAAWG,gBAAX,IACI,KAAKH,KAAL,CAAWG,gBAAX,CAA4B,KAA5B,CADJ;AAEH;;AAED,YAAI,KAAKU,aAAL,KAAuB,IAA3B,EAAiC;AAE7B,eAAKA,aAAL,GAAqB,KAAKH,iBAA1B;AACH;;AACD,YAAI,CAAC,KAAKE,2BAAV,EAAuC;AACnC,eAAKA,2BAAL,GAAmC,IAAnC;AACA,eAAKZ,KAAL,CAAW2F,iBAAX,IAAgC,KAAK3F,KAAL,CAAW2F,iBAAX,EAAhC;AACH;;AAED,YAAIC,KAAK,GAAG,KAAK/E,aAAL,GAAqBsE,EAAjC;;AACA,YAAI,KAAKnF,KAAL,CAAW6F,gBAAX,IAA+BD,KAAK,GAAG,CAA3C,EAA8C;AAC1CA,UAAAA,KAAK,GAAG,CAAR;AACH;;AACD,YAAI,KAAK5F,KAAL,CAAW8F,iBAAX,IAAgCF,KAAK,GAAG,CAA5C,EAA+C;AAC3CA,UAAAA,KAAK,GAAG,CAAR;AACH;;AAED,YAAI,KAAK5F,KAAL,CAAW+F,aAAX,IAA4BH,KAAK,GAAG,KAAK5F,KAAL,CAAW+F,aAAnD,EAAkE;AAC9DH,UAAAA,KAAK,GAAG,KAAK5F,KAAL,CAAW+F,aAAnB;AACH;;AACD,YACI,KAAK/F,KAAL,CAAWgG,cAAX,IACAJ,KAAK,GAAG,KAAK5F,KAAL,CAAWgG,cAFvB,EAGE;AACEJ,UAAAA,KAAK,GAAG,KAAK5F,KAAL,CAAWgG,cAAnB;AACH;;AAED,aAAKxE,WAAL,CAAiByE,QAAjB,CAA0BL,KAA1B;AACH;AACJ;;;8CASyB7D,C,EAAGwD,Y,EAAc;AACvC,WAAKvF,KAAL,CAAWkG,iBAAX,IAAgC,KAAKlG,KAAL,CAAWkG,iBAAX,EAAhC;AACA,WAAK3D,qBAAL,CAA2BR,CAA3B,EAA8BwD,YAA9B;AACH;;;0CAEqBxD,C,EAAGwD,Y,EAAc;AAAA;;AAEnC,UAAI,KAAKvE,cAAT,EAAyB;AACrBmF,QAAAA,UAAU,CAAC,YAAM;AACb,UAAA,MAAI,CAACnF,cAAL,GAAsB,KAAtB;AACH,SAFS,EAEP,GAFO,CAAV;AAGH;;AAED,UAAMoF,+BAA+B,GAAG,KAAKpG,KAAL,CACnCoG,+BADL;AAEA,UAAMC,mBAAmB,GACrB,KAAKrG,KAAL,CAAW6E,cAAX,GAA4BuB,+BADhC;AAEA,UAAME,eAAe,GAAGlB,IAAI,CAACmB,GAAL,CACpBhB,YAAY,CAACiB,EADO,EAEpB3G,yBAFoB,CAAxB;AAIA,UAAM4G,oBAAoB,GACtBJ,mBAAmB,IAAIC,eAAe,GAAGzG,yBAAtB,CADvB;AAIA,WAAKkB,yBAAL,GAAiCoF,UAAU,CACvC,KAAKlG,mBADkC,EAEvCH,wBAFuC,CAA3C;AAMA,UAAI+D,OAAO,GAAG,CAAd;;AACA,UAAI,KAAKnD,iBAAL,IAA0B,CAA9B,EAAiC;AAM7B,YAAI,KAAKG,aAAL,GAAqB,KAAKH,iBAA9B,EAAiD;AAC7C,cACI,KAAKA,iBAAL,GAAyB+F,oBAAzB,GACA,KAAKzG,KAAL,CAAW0G,aAAX,IACK,KAAK1G,KAAL,CAAW2G,kBAAX,GAAgC,GADrC,CAFJ,EAIE;AAEE9C,YAAAA,OAAO,GAAG,KAAK7C,cAAL,GACJ,CADI,GAEJ,KAAKhB,KAAL,CAAW0G,aAFjB;AAGH;AACJ,SAXD,MAWO;AACH,cACI,KAAKhG,iBAAL,GAAyB+F,oBAAzB,GACA,KAAKzG,KAAL,CAAW0G,aAAX,IACK,IAAI,KAAK1G,KAAL,CAAW4G,mBAAX,GAAiC,GAD1C,CAFJ,EAIE;AACE/C,YAAAA,OAAO,GAAG,KAAK7C,cAAL,GACJ,CADI,GAEJ,KAAKhB,KAAL,CAAW0G,aAFjB;AAGH;AACJ;AACJ,OA5BD,MA4BO;AAEH,YAAI,KAAK1G,KAAL,CAAW6F,gBAAf,EAAiC;AAC7B;AACH;;AAED,YAAI,KAAKhF,aAAL,GAAqB,KAAKH,iBAA9B,EAAiD;AAC7C,cACI,KAAKA,iBAAL,GAAyB+F,oBAAzB,GACA,KAAKzG,KAAL,CAAW6E,cAAX,IACK,KAAK7E,KAAL,CAAW2G,kBAAX,GAAgC,GADrC,CAFJ,EAIE;AAEE9C,YAAAA,OAAO,GAAG,KAAK7C,cAAL,GACJ,CADI,GAEJ,KAAKhB,KAAL,CAAW6E,cAFjB;AAGH;AACJ,SAXD,MAWO;AACH,cACI,KAAKnE,iBAAL,GAAyB+F,oBAAzB,GACA,KAAKzG,KAAL,CAAW6E,cAAX,IACK,IAAI,KAAK7E,KAAL,CAAW4G,mBAAX,GAAiC,GAD1C,CAFJ,EAIE;AACE/C,YAAAA,OAAO,GAAG,KAAK7C,cAAL,GACJ,CADI,GAEJ,KAAKhB,KAAL,CAAW6E,cAFjB;AAGH;AACJ;AACJ;;AAED,WAAKgC,gBAAL,CAAsBhD,OAAtB;AACH;;;+BAKU;AACP,WAAKgD,gBAAL,CAAsB,CAAtB;AACH;;;kCAMajE,S,EAAW;AAAA;;AACrB,WAAKiE,gBAAL,CAAsB,CAAtB,EAAyB,YAAM;AAC3B,YAAIjE,SAAS,KAAK,OAAd,IAAyB,MAAI,CAAC5C,KAAL,CAAW8G,sBAAxC,EAAgE;AAC5D,UAAA,MAAI,CAAC9G,KAAL,CAAW8G,sBAAX;AACH,SAFD,MAEO,IACHlE,SAAS,KAAK,MAAd,IACA,MAAI,CAAC5C,KAAL,CAAW+G,qBAFR,EAGL;AACE,UAAA,MAAI,CAAC/G,KAAL,CAAW+G,qBAAX;AACH;AACJ,OATD;AAUH;;;+CAE0B;AACvB,WAAKvF,WAAL,CAAiByE,QAAjB,CAA0B,CAA1B;;AAEA,WAAKhG,mBAAL;AACA,WAAKO,MAAL,GAAc,KAAd;AACA,WAAKR,KAAL,CAAWgH,aAAX,IAA4B,KAAKhH,KAAL,CAAWgH,aAAX,EAA5B;AAEA,WAAKhH,KAAL,CAAWiH,UAAX,IAAyB,KAAKjH,KAAL,CAAWiH,UAAX,EAAzB;AAEA,WAAKpG,aAAL,GAAqB,IAArB;AACA,WAAKD,2BAAL,GAAmC,KAAnC;AACH;;;qCAEgBiD,O,EAASqD,c,EAAgB;AAAA;;AACtCzF,MAAAA,QAAQ,CAAC0F,MAAT,CAAgB,KAAK3F,WAArB,EAAkC;AAC9BqC,QAAAA,OAAO,EAAPA,OAD8B;AAE9BuD,QAAAA,QAAQ,EAAE,KAAKpH,KAAL,CAAWoH,QAFS;AAG9BC,QAAAA,OAAO,EAAE,KAAKrH,KAAL,CAAWqH,OAHU;AAI9BC,QAAAA,kBAAkB,EAAE,KAAKtH,KAAL,CAAWsH,kBAJD;AAK9BC,QAAAA,yBAAyB,EAAE,KAAKvH,KAAL,CAAWuH,yBALR;AAM9BrD,QAAAA,eAAe,EAAE,KAAKlE,KAAL,CAAWkE;AANE,OAAlC,EAOGc,KAPH,CAOS,YAAM;AACX,QAAA,MAAI,CAAC/E,mBAAL;;AACA,YAAI4D,OAAO,KAAK,CAAhB,EAAmB;AACf,UAAA,MAAI,CAACrD,MAAL,GAAc,KAAd;AACA,UAAA,MAAI,CAACR,KAAL,CAAWgH,aAAX,IAA4B,MAAI,CAAChH,KAAL,CAAWgH,aAAX,EAA5B;AACH,SAHD,MAGO;AACH,UAAA,MAAI,CAACxG,MAAL,GAAc,IAAd;AACA,UAAA,MAAI,CAACR,KAAL,CAAWwH,YAAX,IAA2B,MAAI,CAACxH,KAAL,CAAWwH,YAAX,CAAwB3D,OAAxB,CAA3B;AACH;;AACD,YAAIqD,cAAJ,EAAoB;AAChBA,UAAAA,cAAc;AACjB;AACJ,OAnBD;;AAqBA,UAAIrD,OAAO,KAAK,CAAhB,EAAmB;AACf,aAAK7D,KAAL,CAAWiH,UAAX,IAAyB,KAAKjH,KAAL,CAAWiH,UAAX,EAAzB;AACH,OAFD,MAEO;AACH,aAAKjH,KAAL,CAAWyH,SAAX,IAAwB,KAAKzH,KAAL,CAAWyH,SAAX,CAAqB5D,OAArB,CAAxB;AACH;;AAGD,WAAKhD,aAAL,GAAqB,IAArB;AACA,WAAKD,2BAAL,GAAmC,KAAnC;AACH;;;2CAQsB;AACnB,UAAI,CAAC,KAAKZ,KAAL,CAAWiF,eAAhB,EAAiC;AAC7B,eAAO,KAAKjF,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAP;AACH;;AAGD,UAAMD,OAAO,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KAAvB,CAA6BK,OAA7C;;AAEA,UAAIA,OAAJ,EAAa;AACT,eAAOb,KAAK,CAACkI,YAAN,CAAmB,KAAK1H,KAAL,CAAWM,QAAX,CAAoB,CAApB,CAAnB,kCACA,KAAKN,KAAL,CAAWM,QAAX,CAAoB,CAApB,EAAuBN,KADvB;AAEHK,UAAAA,OAAO,EAAE,KAAKD;AAFX,WAAP;AAIH;;AAED,aACI,oBAAC,gBAAD;AACI,QAAA,aAAa,EAAE,CADnB;AAEI,QAAA,OAAO,EAAE,KAAKA,eAFlB;AAGI,QAAA,UAAU,EAAE,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKK,KAAKJ,KAAL,CAAWM,QAAX,CAAoB,CAApB,CALL,CADJ;AASH;;;uCAEkB;AAAA;;AAGf,UAAI,KAAKW,KAAL,CAAWG,aAAf,EAA8B;AAC1B,eACI,oBAAC,QAAD,CAAU,IAAV;AACI,UAAA,iBAAiB,EAAE,CAAC,YAAD;AADvB,WAEQ,KAAKO,aAAL,CAAmBgG,WAF3B;AAGI,UAAA,KAAK,EAAE;AACHC,YAAAA,MAAM,EAAE,CADL;AAEHC,YAAAA,SAAS,EAAE,CAAC;AAAEC,cAAAA,UAAU,EAAE,KAAKtG;AAAnB,aAAD;AAFR,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQK,KAAKuG,oBAAL,EARL,CADJ;AAYH,OAbD,MAaO;AACH,eACI,oBAAC,QAAD,CAAU,IAAV;AACI,UAAA,iBAAiB,EAAE,CAAC,YAAD;AADvB,WAEQ,KAAKpG,aAAL,CAAmBgG,WAF3B;AAGI,UAAA,QAAQ,EAAE,kBAAA5F,CAAC;AAAA,mBAAI,MAAI,CAACiG,eAAL,CAAqBjG,CAArB,CAAJ;AAAA,WAHf;AAII,UAAA,KAAK,EAAE;AACH6F,YAAAA,MAAM,EAAE,CADL;AAEHC,YAAAA,SAAS,EAAE,CAAC;AAAEC,cAAAA,UAAU,EAAE,KAAKtG;AAAnB,aAAD;AAFR,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASK,KAAKuG,oBAAL,EATL,CADJ;AAaH;AACJ;;;6BAEQ;AACL,aACI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWiI,KAAX,GAAmB,KAAKjI,KAAL,CAAWiI,KAA9B,GAAsCC,MAAM,CAACC,SADxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAE,CACHD,MAAM,CAACE,MADJ,EAEH;AACI7D,UAAAA,MAAM,EAAE,KAAKtD,KAAL,CAAWI,YADvB;AAEI6B,UAAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWM;AAFtB,SAFG,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASK,KAAKvB,KAAL,CAAWM,QAAX,CAAoB,CAApB,CATL,CAHJ,EAcK,KAAK+H,gBAAL,EAdL,CADJ;AAkBH;;;6CApY+B5E,S,EAAW6E,S,EAAW;AAClD,UAAI,CAAC7E,SAAS,CAACiB,aAAf,EAA8B;AAC1B6D,QAAAA,aAAa,CAACD,SAAS,CAACpH,qBAAX,CAAb;AACAoH,QAAAA,SAAS,CAACpH,qBAAV,GAAkC,IAAlC;AACH;;AACDoH,MAAAA,SAAS,CAACnH,yBAAV,GACIsC,SAAS,CAACQ,eAAV,GAA4B,CAA5B,GACAR,SAAS,CAACsB,gBADV,GAEAnF,mBAFA,GAGA6D,SAAS,CAAC+E,kBAJd;AAKA,aAAOF,SAAP;AACH;;;;EA9HkB7I,S;;AA0fvB,IAAMyI,MAAM,GAAGO,UAAU,CAAC5G,MAAX,CAAkB;AAC7BsG,EAAAA,SAAS,EAAE,EADkB;AAK7BC,EAAAA,MAAM,EAAE;AACJR,IAAAA,MAAM,EAAE,CADJ;AAEJc,IAAAA,MAAM,EAAE,CAFJ;AAGJC,IAAAA,IAAI,EAAE,CAHF;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,QAAQ,EAAE,UALN;AAMJC,IAAAA,KAAK,EAAE,CANH;AAOJC,IAAAA,GAAG,EAAE;AAPD;AALqB,CAAlB,CAAf;AAgBAhJ,QAAQ,CAACiJ,SAAT,GAAqB;AAKjB7I,EAAAA,gBAAgB,EAAET,SAAS,CAACuJ,IALX;AASjBtD,EAAAA,iBAAiB,EAAEjG,SAAS,CAACuJ,IATZ;AAajB/C,EAAAA,iBAAiB,EAAExG,SAAS,CAACuJ,IAbZ;AAkBjBxB,EAAAA,SAAS,EAAE/H,SAAS,CAACuJ,IAlBJ;AAsBjBzB,EAAAA,YAAY,EAAE9H,SAAS,CAACuJ,IAtBP;AA0BjBvC,EAAAA,aAAa,EAAEhH,SAAS,CAACwJ,MA1BR;AA8BjBrE,EAAAA,cAAc,EAAEnF,SAAS,CAACwJ,MA9BT;AAkCjBnD,EAAAA,aAAa,EAAErG,SAAS,CAACwJ,MAlCR;AAsCjBlD,EAAAA,cAAc,EAAEtG,SAAS,CAACwJ,MAtCT;AA0CjB9B,EAAAA,QAAQ,EAAE1H,SAAS,CAACwJ,MA1CH;AA8CjB7B,EAAAA,OAAO,EAAE3H,SAAS,CAACwJ,MA9CF;AAkDjB5B,EAAAA,kBAAkB,EAAE5H,SAAS,CAACwJ,MAlDb;AAsDjB3B,EAAAA,yBAAyB,EAAE7H,SAAS,CAACwJ,MAtDpB;AA0DjBjE,EAAAA,eAAe,EAAEvF,SAAS,CAACyJ,IA1DV;AA8DjBtD,EAAAA,gBAAgB,EAAEnG,SAAS,CAACyJ,IA9DX;AAkEjBrD,EAAAA,iBAAiB,EAAEpG,SAAS,CAACyJ,IAlEZ;AAsEjB/E,EAAAA,uBAAuB,EAAE1E,SAAS,CAACyJ,IAtElB;AA0EjB7H,EAAAA,8BAA8B,EAAE5B,SAAS,CAACyJ,IA1EzB;AA8EjBlC,EAAAA,UAAU,EAAEvH,SAAS,CAACuJ,IA9EL;AAkFjBjC,EAAAA,aAAa,EAAEtH,SAAS,CAACuJ,IAlFR;AAsFjBhB,EAAAA,KAAK,EAAEmB,aAAa,CAACnB,KAtFJ;AA0FjBzD,EAAAA,OAAO,EAAE9E,SAAS,CAACyJ,IA1FF;AA8FjBlF,EAAAA,eAAe,EAAEvE,SAAS,CAACwJ,MA9FV;AAkGjBxE,EAAAA,aAAa,EAAEhF,SAAS,CAACyJ,IAlGR;AAuGjBX,EAAAA,kBAAkB,EAAE9I,SAAS,CAACwJ,MAvGb;AA4GjBtE,EAAAA,gBAAgB,EAAElF,SAAS,CAACwJ,MA5GX;AAgHjB5D,EAAAA,kCAAkC,EAAE5F,SAAS,CAACwJ,MAhH7B;AAqHjBvC,EAAAA,kBAAkB,EAAEjH,SAAS,CAACwJ,MArHb;AA2HjB9C,EAAAA,+BAA+B,EAAE1G,SAAS,CAACwJ,MA3H1B;AAgIjBtC,EAAAA,mBAAmB,EAAElH,SAAS,CAACwJ,MAhId;AAoIjBvF,EAAAA,gBAAgB,EAAEjE,SAAS,CAACuJ,IApIX;AAwIjBtG,EAAAA,kBAAkB,EAAEjD,SAAS,CAACuJ,IAxIb;AA4IjB5F,EAAAA,yBAAyB,EAAE3D,SAAS,CAACwJ,MA5IpB;AAgJjBnG,EAAAA,0BAA0B,EAAErD,SAAS,CAACwJ,MAhJrB;AAoJjB5F,EAAAA,kBAAkB,EAAE5D,SAAS,CAACuJ,IApJb;AAwJjB7F,EAAAA,mBAAmB,EAAE1D,SAAS,CAACuJ,IAxJd;AA4JjBlC,EAAAA,qBAAqB,EAAErH,SAAS,CAACuJ,IA5JhB;AAgKjBnC,EAAAA,sBAAsB,EAAEpH,SAAS,CAACuJ,IAhKjB;AAoKjB/E,EAAAA,eAAe,EAAExE,SAAS,CAACyJ,IApKV;AAwKjB7I,EAAAA,QAAQ,EAAEZ,SAAS,CAAC2J,IAAV,CAAeC,UAxKR;AA4KjBxG,EAAAA,QAAQ,EAAEpD,SAAS,CAAC6J;AA5KH,CAArB;AA+KAxJ,QAAQ,CAACyJ,YAAT,GAAwB;AACpB9C,EAAAA,aAAa,EAAE,CADK;AAEpB7B,EAAAA,cAAc,EAAE,CAFI;AAGpBI,EAAAA,eAAe,EAAE,IAHG;AAIpBY,EAAAA,gBAAgB,EAAE,KAJE;AAKpBC,EAAAA,iBAAiB,EAAE,KALC;AAMpB1B,EAAAA,uBAAuB,EAAE,KANL;AAOpB9C,EAAAA,8BAA8B,EAAE,KAPZ;AAQpBkD,EAAAA,OAAO,EAAE,KARW;AASpBP,EAAAA,eAAe,EAAE,GATG;AAUpBc,EAAAA,gBAAgB,EAAEpF,0BAVE;AAWpB2F,EAAAA,kCAAkC,EAAE,CAXhB;AAYpBqB,EAAAA,kBAAkB,EAAE,EAZA;AAapBP,EAAAA,+BAA+B,EAAE,CAbb;AAcpBQ,EAAAA,mBAAmB,EAAE,EAdD;AAepBhD,EAAAA,IAAI,EAAE,EAfc;AAgBpBM,EAAAA,eAAe,EAAE,IAhBG;AAiBpBQ,EAAAA,aAAa,EAAE,KAjBK;AAkBpB8D,EAAAA,kBAAkB,EAAE;AAlBA,CAAxB;AAqBA,eAAezI,QAAf","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Dimensions,\n    Animated,\n    PanResponder,\n    StyleSheet,\n    TouchableOpacity,\n    ViewPropTypes,\n    View,\n} from 'react-native';\n\nconst DEFAULT_PREVIEW_OPEN_DELAY = 700;\nconst PREVIEW_CLOSE_DELAY = 300;\nconst MAX_VELOCITY_CONTRIBUTION = 5;\nconst SCROLL_LOCK_MILLISECONDS = 300;\n\n/**\n * Row that is generally used in a SwipeListView.\n * If you are rendering a SwipeRow explicitly you must pass the SwipeRow exactly two children.\n * The first will be rendered behind the second.\n * e.g.\n  <SwipeRow>\n      <View style={hiddenRowStyle} />\n      <View style={visibleRowStyle} />\n  </SwipeRow>\n */\nclass SwipeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.isOpen = false;\n        this.previousTrackedTranslateX = 0;\n        this.currentTranslateX = 0;\n        this.previousTrackedDirection = null;\n        this.horizontalSwipeGestureBegan = false;\n        this.swipeInitialX = null;\n        this.parentScrollEnabled = true;\n        this.ranPreview = false;\n        this._ensureScrollEnabledTimer = null;\n        this.isForceClosing = false;\n        this.state = {\n            previewRepeatInterval: null,\n            timeBetweenPreviewRepeats: null,\n            dimensionsSet: false,\n            hiddenHeight: this.props.disableHiddenLayoutCalculation\n                ? '100%'\n                : 0,\n            hiddenWidth: this.props.disableHiddenLayoutCalculation ? '100%' : 0,\n        };\n        this._translateX = new Animated.Value(0);\n\n        this._panResponder = PanResponder.create({\n            onMoveShouldSetPanResponder: (e, gs) =>\n                this.handleOnMoveShouldSetPanResponder(e, gs),\n            onPanResponderMove: (e, gs) => this.handlePanResponderMove(e, gs),\n            onPanResponderRelease: (e, gs) =>\n                this.handlePanResponderRelease(e, gs),\n            onPanResponderTerminate: (e, gs) =>\n                this.handlePanResponderEnd(e, gs),\n            onShouldBlockNativeResponder: () => false,\n        });\n\n        this._translateX.addListener(({ value }) => {\n            this.currentTranslateX = value;\n            if (this.props.onSwipeValueChange) {\n                let direction = this.previousTrackedDirection;\n                if (value !== this.previousTrackedTranslateX) {\n                    direction =\n                        value > this.previousTrackedTranslateX\n                            ? 'right'\n                            : 'left';\n                }\n                this.props.onSwipeValueChange &&\n                    this.props.onSwipeValueChange({\n                        isOpen: this.isOpen,\n                        direction,\n                        value,\n                        key: this.props.swipeKey,\n                    });\n                this.previousTrackedTranslateX = value;\n                this.previousTrackedDirection = direction;\n            }\n        });\n\n        if (\n            this.props.forceCloseToRightThreshold &&\n            this.props.forceCloseToRightThreshold > 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                if (\n                    !this.isForceClosing &&\n                    Dimensions.get('window').width + value <\n                        this.props.forceCloseToRightThreshold\n                ) {\n                    this.isForceClosing = true;\n                    this.forceCloseRow('right');\n                    if (this.props.onForceCloseToRight) {\n                        this.props.onForceCloseToRight();\n                    }\n                }\n            });\n        }\n\n        if (\n            this.props.forceCloseToLeftThreshold &&\n            this.props.forceCloseToRightThreshold > 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                if (\n                    !this.isForceClosing &&\n                    Dimensions.get('window').width - value <\n                        this.props.forceCloseToLeftThreshold\n                ) {\n                    this.isForceClosing = true;\n                    this.forceCloseRow('left');\n                    if (this.props.onForceCloseToLeft) {\n                        this.props.onForceCloseToLeft();\n                    }\n                }\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this._ensureScrollEnabledTimer);\n        this._translateX.removeAllListeners();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.hiddenHeight !== nextState.hiddenHeight ||\n            this.state.hiddenWidth !== nextState.hiddenWidth ||\n            !this.props.shouldItemUpdate ||\n            (this.props.shouldItemUpdate &&\n                this.props.shouldItemUpdate(this.props.item, nextProps.item))\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.previewRepeat) {\n            clearInterval(prevState.previewRepeatInterval);\n            prevState.previewRepeatInterval = null;\n        }\n        prevState.timeBetweenPreviewRepeats =\n            nextProps.previewDuration * 2 +\n            nextProps.previewOpenDelay +\n            PREVIEW_CLOSE_DELAY +\n            nextProps.previewRepeatDelay;\n        return prevState;\n    }\n\n    getPreviewAnimation(toValue, delay) {\n        return Animated.timing(this._translateX, {\n            duration: this.props.previewDuration,\n            toValue,\n            delay,\n            useNativeDriver: this.props.useNativeDriver,\n        });\n    }\n\n    onContentLayout(e) {\n        this.setState({\n            dimensionsSet: !this.props.recalculateHiddenLayout,\n            ...(!this.props.disableHiddenLayoutCalculation\n                ? {\n                      hiddenHeight: e.nativeEvent.layout.height,\n                      hiddenWidth: e.nativeEvent.layout.width,\n                  }\n                : {}),\n        });\n\n        if (this.props.preview && !this.ranPreview) {\n            this.ranPreview = true;\n            this.doFullAnimation();\n            if (this.props.previewRepeat) {\n                this.setState({\n                    previewRepeatInterval: setInterval(() => {\n                        this.doFullAnimation();\n                    }, this.state.timeBetweenPreviewRepeats),\n                });\n            }\n        }\n    }\n\n    doFullAnimation() {\n        const previewOpenValue =\n            this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n        return this.getPreviewAnimation(\n            previewOpenValue,\n            this.props.previewOpenDelay\n        ).start(() => {\n            this.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n        });\n    }\n\n    onRowPress() {\n        if (this.props.onRowPress) {\n            this.props.onRowPress();\n        } else {\n            if (this.props.closeOnRowPress) {\n                this.closeRow();\n            }\n        }\n    }\n\n    handleOnMoveShouldSetPanResponder(e, gs) {\n        const { dx } = gs;\n        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n\n    handlePanResponderMove(e, gestureState) {\n        /* If the view is force closing, then ignore Moves. Return */\n        if (this.isForceClosing) {\n            return;\n        }\n\n        /* Else, do normal job */\n        const { dx, dy } = gestureState;\n        const absDx = Math.abs(dx);\n        const absDy = Math.abs(dy);\n\n        // this check may not be necessary because we don't capture the move until we pass the threshold\n        // just being extra safe here\n        if (\n            absDx > this.props.directionalDistanceChangeThreshold ||\n            absDy > this.props.directionalDistanceChangeThreshold\n        ) {\n            // we have enough to determine direction\n            if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n                // user is moving vertically, do nothing, listView will handle\n                return;\n            }\n\n            // user is moving horizontally\n            if (this.parentScrollEnabled) {\n                // disable scrolling on the listView parent\n                this.parentScrollEnabled = false;\n                this.props.setScrollEnabled &&\n                    this.props.setScrollEnabled(false);\n            }\n\n            if (this.swipeInitialX === null) {\n                // set tranlateX value when user started swiping\n                this.swipeInitialX = this.currentTranslateX;\n            }\n            if (!this.horizontalSwipeGestureBegan) {\n                this.horizontalSwipeGestureBegan = true;\n                this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n            }\n\n            let newDX = this.swipeInitialX + dx;\n            if (this.props.disableLeftSwipe && newDX < 0) {\n                newDX = 0;\n            }\n            if (this.props.disableRightSwipe && newDX > 0) {\n                newDX = 0;\n            }\n\n            if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n                newDX = this.props.stopLeftSwipe;\n            }\n            if (\n                this.props.stopRightSwipe &&\n                newDX < this.props.stopRightSwipe\n            ) {\n                newDX = this.props.stopRightSwipe;\n            }\n\n            this._translateX.setValue(newDX);\n        }\n    }\n\n    ensureScrollEnabled = () => {\n        if (!this.parentScrollEnabled) {\n            this.parentScrollEnabled = true;\n            this.props.setScrollEnabled && this.props.setScrollEnabled(true);\n        }\n    };\n\n    handlePanResponderRelease(e, gestureState) {\n        this.props.swipeGestureEnded && this.props.swipeGestureEnded();\n        this.handlePanResponderEnd(e, gestureState);\n    }\n\n    handlePanResponderEnd(e, gestureState) {\n        /* PandEnd will reset the force-closing state when it's true. */\n        if (this.isForceClosing) {\n            setTimeout(() => {\n                this.isForceClosing = false;\n            }, 500); // 500 is the default Animated.spring's duration used in manuallySwipeRow\n        }\n        // decide how much the velocity will affect the final position that the list item settles in.\n        const swipeToOpenVelocityContribution = this.props\n            .swipeToOpenVelocityContribution;\n        const possibleExtraPixels =\n            this.props.rightOpenValue * swipeToOpenVelocityContribution;\n        const clampedVelocity = Math.min(\n            gestureState.vx,\n            MAX_VELOCITY_CONTRIBUTION\n        );\n        const projectedExtraPixels =\n            possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\n\n        // re-enable scrolling on listView parent\n        this._ensureScrollEnabledTimer = setTimeout(\n            this.ensureScrollEnabled,\n            SCROLL_LOCK_MILLISECONDS\n        );\n\n        // finish up the animation\n        let toValue = 0;\n        if (this.currentTranslateX >= 0) {\n            // trying to swipe right\n            // if (this.props.disableRightSwipe) {\n            //    return;\n            // }\n\n            if (this.swipeInitialX < this.currentTranslateX) {\n                if (\n                    this.currentTranslateX - projectedExtraPixels >\n                    this.props.leftOpenValue *\n                        (this.props.swipeToOpenPercent / 100)\n                ) {\n                    // we're more than halfway\n                    toValue = this.isForceClosing\n                        ? 0\n                        : this.props.leftOpenValue;\n                }\n            } else {\n                if (\n                    this.currentTranslateX - projectedExtraPixels >\n                    this.props.leftOpenValue *\n                        (1 - this.props.swipeToClosePercent / 100)\n                ) {\n                    toValue = this.isForceClosing\n                        ? 0\n                        : this.props.leftOpenValue;\n                }\n            }\n        } else {\n            // trying to swipe left\n            if (this.props.disableLeftSwipe) {\n                return;\n            }\n\n            if (this.swipeInitialX > this.currentTranslateX) {\n                if (\n                    this.currentTranslateX - projectedExtraPixels <\n                    this.props.rightOpenValue *\n                        (this.props.swipeToOpenPercent / 100)\n                ) {\n                    // we're more than halfway\n                    toValue = this.isForceClosing\n                        ? 0\n                        : this.props.rightOpenValue;\n                }\n            } else {\n                if (\n                    this.currentTranslateX - projectedExtraPixels <\n                    this.props.rightOpenValue *\n                        (1 - this.props.swipeToClosePercent / 100)\n                ) {\n                    toValue = this.isForceClosing\n                        ? 0\n                        : this.props.rightOpenValue;\n                }\n            }\n        }\n\n        this.manuallySwipeRow(toValue);\n    }\n\n    /*\n     * This method is called by SwipeListView\n     */\n    closeRow() {\n        this.manuallySwipeRow(0);\n    }\n\n    /**\n     * Force close the row toward the end of the given direction.\n     * @param  {String} direction The direction to force close.\n     */\n    forceCloseRow(direction) {\n        this.manuallySwipeRow(0, () => {\n            if (direction === 'right' && this.props.onForceCloseToRightEnd) {\n                this.props.onForceCloseToRightEnd();\n            } else if (\n                direction === 'left' &&\n                this.props.onForceCloseToLeftEnd\n            ) {\n                this.props.onForceCloseToLeftEnd();\n            }\n        });\n    }\n\n    closeRowWithoutAnimation() {\n        this._translateX.setValue(0);\n\n        this.ensureScrollEnabled();\n        this.isOpen = false;\n        this.props.onRowDidClose && this.props.onRowDidClose();\n\n        this.props.onRowClose && this.props.onRowClose();\n\n        this.swipeInitialX = null;\n        this.horizontalSwipeGestureBegan = false;\n    }\n\n    manuallySwipeRow(toValue, onAnimationEnd) {\n        Animated.spring(this._translateX, {\n            toValue,\n            friction: this.props.friction,\n            tension: this.props.tension,\n            restSpeedThreshold: this.props.restSpeedThreshold,\n            restDisplacementThreshold: this.props.restDisplacementThreshold,\n            useNativeDriver: this.props.useNativeDriver,\n        }).start(() => {\n            this.ensureScrollEnabled();\n            if (toValue === 0) {\n                this.isOpen = false;\n                this.props.onRowDidClose && this.props.onRowDidClose();\n            } else {\n                this.isOpen = true;\n                this.props.onRowDidOpen && this.props.onRowDidOpen(toValue);\n            }\n            if (onAnimationEnd) {\n                onAnimationEnd();\n            }\n        });\n\n        if (toValue === 0) {\n            this.props.onRowClose && this.props.onRowClose();\n        } else {\n            this.props.onRowOpen && this.props.onRowOpen(toValue);\n        }\n\n        // reset everything\n        this.swipeInitialX = null;\n        this.horizontalSwipeGestureBegan = false;\n    }\n\n    combinedOnPress = (...args) => {\n        const onPress = this.props.children[1].props.onPress;\n        this.onRowPress();\n        onPress && onPress(...args);\n    };\n\n    renderVisibleContent() {\n        if (!this.props.closeOnRowPress) {\n            return this.props.children[1];\n        }\n\n        // handle touchables\n        const onPress = this.props.children[1].props.onPress;\n\n        if (onPress) {\n            return React.cloneElement(this.props.children[1], {\n                ...this.props.children[1].props,\n                onPress: this.combinedOnPress,\n            });\n        }\n\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                onPress={this.combinedOnPress}\n                accessible={false}\n            >\n                {this.props.children[1]}\n            </TouchableOpacity>\n        );\n    }\n\n    renderRowContent() {\n        // We do this annoying if statement for performance.\n        // We don't want the onLayout func to run after it runs once.\n        if (this.state.dimensionsSet) {\n            return (\n                <Animated.View\n                    manipulationModes={['translateX']}\n                    {...this._panResponder.panHandlers}\n                    style={{\n                        zIndex: 2,\n                        transform: [{ translateX: this._translateX }],\n                    }}\n                >\n                    {this.renderVisibleContent()}\n                </Animated.View>\n            );\n        } else {\n            return (\n                <Animated.View\n                    manipulationModes={['translateX']}\n                    {...this._panResponder.panHandlers}\n                    onLayout={e => this.onContentLayout(e)}\n                    style={{\n                        zIndex: 2,\n                        transform: [{ translateX: this._translateX }],\n                    }}\n                >\n                    {this.renderVisibleContent()}\n                </Animated.View>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <View\n                style={this.props.style ? this.props.style : styles.container}\n            >\n                <View\n                    style={[\n                        styles.hidden,\n                        {\n                            height: this.state.hiddenHeight,\n                            width: this.state.hiddenWidth,\n                        },\n                    ]}\n                >\n                    {this.props.children[0]}\n                </View>\n                {this.renderRowContent()}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        // As of RN 0.29 flex: 1 is causing all rows to be the same height\n        // flex: 1\n    },\n    hidden: {\n        zIndex: 1,\n        bottom: 0,\n        left: 0,\n        overflow: 'hidden',\n        position: 'absolute',\n        right: 0,\n        top: 0,\n    },\n});\n\nSwipeRow.propTypes = {\n    /**\n     * Used by the SwipeListView to close rows on scroll events.\n     * You shouldn't need to use this prop explicitly.\n     */\n    setScrollEnabled: PropTypes.func,\n    /**\n     * Called when it has been detected that a row should be swiped open.\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open. Used by the SwipeListView\n     * to keep references to open rows.\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open.\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * Should the row be closed when it is tapped\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Disable ability to swipe the row left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe the row right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    style: ViewPropTypes.style,\n    /**\n     * Should the row do a slide out preview to show that it is swipeable\n     */\n    preview: PropTypes.bool,\n    /**\n     * Duration of the slide out preview animation\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture contributes to whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of the row is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Left End (positive number)\n     */\n    forceCloseToLeftThreshold: PropTypes.number,\n    /**\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Right End (positive number)\n     */\n    forceCloseToRightThreshold: PropTypes.number,\n    /**\n     * Callback invoked when row is force closing to the Left End\n     */\n    onForceCloseToLeft: PropTypes.func,\n    /**\n     * Callback invoked when row is force closing to the Right End\n     */\n    onForceCloseToRight: PropTypes.func,\n    /**\n     * Callback invoked when row has finished force closing to the Left End\n     */\n    onForceCloseToLeftEnd: PropTypes.func,\n    /**\n     * Callback invoked when row has finished force closing to the Right End\n     */\n    onForceCloseToRightEnd: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Children\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Key used to identify rows on swipe value changes\n     */\n    swipeKey: PropTypes.string,\n};\n\nSwipeRow.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowPress: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    preview: false,\n    previewDuration: 300,\n    previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    item: {},\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n};\n\nexport default SwipeRow;\n"]},"metadata":{},"sourceType":"module"}